import type { Metadata } from "next"
import { ArticleSchema } from "../components/article-schema"
import { CriticalImagePreloader } from "@/components/common/performance/critical-image-preloader"
import { notFound } from "next/navigation"
import Image from "next/image"

// This is a sample template for blog posts that demonstrates how to implement
// article schema, semantic HTML, and SEO optimizations. This file can be used
// as a reference when implementing actual blog posts.

// For a real implementation, you would fetch the blog post data from a CMS or API
const getBlogPost = async (slug: string) => {
  // This is a mock blog post for demonstration purposes
  const post = {
    title: "How SAP Business One Transforms Manufacturing Operations",
    description: "Discover how SAP Business One can streamline your manufacturing processes, reduce costs by 30%, and improve operational efficiency across your entire production line.",
    slug: "sap-business-one-manufacturing-transformation",
    content: "<p>SAP Business One provides comprehensive functionality for manufacturing companies...</p>",
    imageUrl: "/images/blog/sap-manufacturing.jpg",
    datePublished: "2023-10-15T09:00:00Z",
    dateModified: "2023-10-17T11:30:00Z",
    category: "SAP Business One",
    tags: ["Manufacturing", "ERP Implementation", "Process Optimization", "Industry 4.0", "Cost Reduction"],
    author: {
      name: "John Smith",
      title: "ERP Solutions Specialist",
      profileUrl: "/team/john-smith"
    }
  }

  // In a real implementation, you would check if the post exists
  // and return notFound() if it doesn't
  if (slug !== post.slug) {
    return null
  }

  return post
}

// In a real implementation, you would generate metadata based on the blog post data
export async function generateMetadata({ params }: { params: { slug: string } }): Promise<Metadata> {
  const post = await getBlogPost(params.slug)
  
  if (!post) {
    return {}
  }

  return {
    title: `${post.title} | Atlas Technosoft Blog`,
    description: post.description,
    keywords: post.tags.join(", "),
    openGraph: {
      title: post.title,
      description: post.description,
      type: "article",
      url: `https://www.atlastechnosoft.com/blog/${post.slug}`,
      images: [
        {
          url: post.imageUrl,
          width: 1200,
          height: 630,
          alt: post.title,
        },
      ],
      publishedTime: post.datePublished,
      modifiedTime: post.dateModified,
      authors: [post.author.name],
      tags: post.tags,
    },
    twitter: {
      card: "summary_large_image",
      title: post.title,
      description: post.description,
      images: [post.imageUrl],
    },
    alternates: {
      canonical: `https://www.atlastechnosoft.com/blog/${post.slug}`,
    },
  }
}

export default async function BlogPostPage({ params }: { params: { slug: string } }) {
  const post = await getBlogPost(params.slug)

  if (!post) {
    notFound()
  }

  // Critical images for the page that should be preloaded
  const CRITICAL_IMAGES = [
    post.imageUrl,
    "/images/patterns/dots.svg",
  ]

  // Image priority configuration
  const IMAGE_PRIORITIES: Record<string, "high" | "medium" | "low"> = {
    [post.imageUrl]: "high",
    "/images/patterns/dots.svg": "medium",
  }

  return (
    <>
      {/* Preload critical images */}
      <CriticalImagePreloader 
        imagePaths={CRITICAL_IMAGES}
        priorityLevels={IMAGE_PRIORITIES}
        disableOnSlowConnection={true}
      />
      
      {/* Article Schema for structured data */}
      <ArticleSchema
        title={post.title}
        description={post.description}
        slug={post.slug}
        imageUrl={post.imageUrl}
        datePublished={post.datePublished}
        dateModified={post.dateModified}
        authorName={post.author.name}
        authorUrl={post.author.profileUrl}
        category={post.category}
        tags={post.tags}
      />
      
      <article className="container py-10 max-w-4xl mx-auto" itemScope itemType="https://schema.org/BlogPosting">
        {/* Hidden metadata for structured data */}
        <meta itemProp="headline" content={post.title} />
        <meta itemProp="description" content={post.description} />
        <meta itemProp="datePublished" content={post.datePublished} />
        <meta itemProp="dateModified" content={post.dateModified} />
        <link itemProp="image" href={`https://www.atlastechnosoft.com${post.imageUrl}`} />
        
        <div itemProp="publisher" itemScope itemType="https://schema.org/Organization">
          <meta itemProp="name" content="Atlas Technosoft" />
          <link itemProp="logo" href="https://www.atlastechnosoft.com/images/logo.png" />
        </div>
        
        <div itemProp="author" itemScope itemType="https://schema.org/Person">
          <meta itemProp="name" content={post.author.name} />
        </div>
        
        {/* Hero Section */}
        <div className="mb-10">
          <div className="space-y-2 mb-6">
            <div className="flex items-center text-sm text-muted-foreground gap-2">
              <span className="font-medium text-primary">{post.category}</span>
              <span className="text-muted-foreground">â€¢</span>
              <time dateTime={post.datePublished} itemProp="datePublished">
                {new Date(post.datePublished).toLocaleDateString('en-US', {
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric'
                })}
              </time>
            </div>
            
            <h1 className="font-heading text-3xl md:text-4xl lg:text-5xl" itemProp="headline">
              {post.title}
            </h1>
            
            <p className="text-xl text-muted-foreground mt-4" itemProp="description">
              {post.description}
            </p>
          </div>
          
          <div className="flex items-center gap-3 mb-8">
            <div className="h-10 w-10 rounded-full bg-muted flex items-center justify-center overflow-hidden">
              {/* This would be the author's image in a real implementation */}
              <span className="text-sm font-medium">{post.author.name.substring(0, 2)}</span>
            </div>
            <div>
              <div className="text-sm font-medium" itemProp="author" itemScope itemType="https://schema.org/Person">
                <span itemProp="name">{post.author.name}</span>
              </div>
              <div className="text-xs text-muted-foreground">
                {post.author.title}
              </div>
            </div>
          </div>
          
          {/* Featured Image */}
          <div className="relative aspect-[16/9] overflow-hidden rounded-lg mb-10">
            <Image
              src={post.imageUrl}
              alt={post.title}
              fill
              priority
              className="object-cover"
              sizes="(min-width: 1024px) 1000px, 100vw"
              itemProp="image"
            />
          </div>
        </div>
        
        {/* Content */}
        <div className="prose prose-lg dark:prose-invert max-w-none" itemProp="articleBody" 
          dangerouslySetInnerHTML={{ __html: post.content }} 
        />
        
        {/* Tags */}
        <div className="mt-10 pt-6 border-t">
          <h3 className="text-sm font-medium mb-3">Tags:</h3>
          <div className="flex flex-wrap gap-2">
            {post.tags.map((tag) => (
              <span key={tag} className="text-xs px-3 py-1 bg-muted rounded-full">
                {tag}
              </span>
            ))}
          </div>
        </div>
      </article>
    </>
  )
} 